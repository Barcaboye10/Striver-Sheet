class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res=new ArrayList<>();
        List<Integer> curr=new ArrayList<>();
        helper(candidates, target, res, curr, 0);
        return res;
    }

    // Helper Function 1st way:
    public void helper(int[] nums, int target, List<List<Integer>> res, List<Integer> curr, int start) {
        if(target>0) {
            for(int i=start;i<nums.length && nums[i]<=target;i++) {
                curr.add(nums[i]);
                helper(nums, target-nums[i], res, curr,i);
                curr.remove(curr.size()-1);
            }
        }
        else if(target==0)
        {
            res.add(new ArrayList<>(curr));
            return;
        } 
    }

    // Helper function, 2nd way:
    public void helper(int[] nums, int t, List<List<Integer>> res, List<Integer> curr, int idx) {
        if(idx==nums.length)
            return;
        if(t<0)
            return;
        else if(t==0) {
            res.add(new ArrayList<>(curr));
            return;
        }
        helper(nums,t,res,curr,idx+1);
        curr.add(nums[idx]);
        helper(nums,t-nums[idx],res,curr,idx);
        curr.remove(curr.size()-1);
    }
}